// Code generated by MockGen. DO NOT EDIT.
// Source: ./../client/modules/state/state.go

// Package clientMocks is a generated GoMock package.
package clientMocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/lidofinance/dc4bc/client/types"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockState) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStateMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockState)(nil).Delete), key)
}

// DeleteOperation mocks base method.
func (m *MockState) DeleteOperation(operation *types.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperation", operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperation indicates an expected call of DeleteOperation.
func (mr *MockStateMockRecorder) DeleteOperation(operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperation", reflect.TypeOf((*MockState)(nil).DeleteOperation), operation)
}

// Get mocks base method.
func (m *MockState) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStateMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockState)(nil).Get), key)
}

// GetOperationByID mocks base method.
func (m *MockState) GetOperationByID(operationID string) (*types.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationByID", operationID)
	ret0, _ := ret[0].(*types.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationByID indicates an expected call of GetOperationByID.
func (mr *MockStateMockRecorder) GetOperationByID(operationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationByID", reflect.TypeOf((*MockState)(nil).GetOperationByID), operationID)
}

// GetOperations mocks base method.
func (m *MockState) GetOperations() (map[string]*types.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations")
	ret0, _ := ret[0].(map[string]*types.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockStateMockRecorder) GetOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockState)(nil).GetOperations))
}

// GetSignatureByID mocks base method.
func (m *MockState) GetSignatureByID(dkgID, signatureID string) ([]types.ReconstructedSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignatureByID", dkgID, signatureID)
	ret0, _ := ret[0].([]types.ReconstructedSignature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatureByID indicates an expected call of GetSignatureByID.
func (mr *MockStateMockRecorder) GetSignatureByID(dkgID, signatureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatureByID", reflect.TypeOf((*MockState)(nil).GetSignatureByID), dkgID, signatureID)
}

// GetSignatures mocks base method.
func (m *MockState) GetSignatures(dkgID string) (map[string][]types.ReconstructedSignature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignatures", dkgID)
	ret0, _ := ret[0].(map[string][]types.ReconstructedSignature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatures indicates an expected call of GetSignatures.
func (mr *MockStateMockRecorder) GetSignatures(dkgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatures", reflect.TypeOf((*MockState)(nil).GetSignatures), dkgID)
}

// LoadOffset mocks base method.
func (m *MockState) LoadOffset() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOffset")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadOffset indicates an expected call of LoadOffset.
func (mr *MockStateMockRecorder) LoadOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOffset", reflect.TypeOf((*MockState)(nil).LoadOffset))
}

// PutOperation mocks base method.
func (m *MockState) PutOperation(operation *types.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOperation", operation)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutOperation indicates an expected call of PutOperation.
func (mr *MockStateMockRecorder) PutOperation(operation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOperation", reflect.TypeOf((*MockState)(nil).PutOperation), operation)
}

// Reset mocks base method.
func (m *MockState) Reset(stateDbPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", stateDbPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reset indicates an expected call of Reset.
func (mr *MockStateMockRecorder) Reset(stateDbPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockState)(nil).Reset), stateDbPath)
}

// SaveOffset mocks base method.
func (m *MockState) SaveOffset(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOffset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOffset indicates an expected call of SaveOffset.
func (mr *MockStateMockRecorder) SaveOffset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOffset", reflect.TypeOf((*MockState)(nil).SaveOffset), arg0)
}

// SaveSignatures mocks base method.
func (m *MockState) SaveSignatures(signature []types.ReconstructedSignature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSignatures", signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSignatures indicates an expected call of SaveSignatures.
func (mr *MockStateMockRecorder) SaveSignatures(signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSignatures", reflect.TypeOf((*MockState)(nil).SaveSignatures), signature)
}

// Set mocks base method.
func (m *MockState) Set(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStateMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockState)(nil).Set), key, value)
}
