// Code generated by MockGen. DO NOT EDIT.
// Source: ./../qr/qr.go

// Package qrMocks is a generated GoMock package.
package qrMocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	qrcode "github.com/skip2/go-qrcode"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// ReadQR mocks base method.
func (m *MockProcessor) ReadQR(filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadQR", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadQR indicates an expected call of ReadQR.
func (mr *MockProcessorMockRecorder) ReadQR(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadQR", reflect.TypeOf((*MockProcessor)(nil).ReadQR), filename)
}

// SetChunkSize mocks base method.
func (m *MockProcessor) SetChunkSize(chunkSize int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetChunkSize", chunkSize)
}

// SetChunkSize indicates an expected call of SetChunkSize.
func (mr *MockProcessorMockRecorder) SetChunkSize(chunkSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChunkSize", reflect.TypeOf((*MockProcessor)(nil).SetChunkSize), chunkSize)
}

// SetDelay mocks base method.
func (m *MockProcessor) SetDelay(delay int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDelay", delay)
}

// SetDelay indicates an expected call of SetDelay.
func (mr *MockProcessorMockRecorder) SetDelay(delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDelay", reflect.TypeOf((*MockProcessor)(nil).SetDelay), delay)
}

// SetRecoveryLevel mocks base method.
func (m *MockProcessor) SetRecoveryLevel(recoveryLevel qrcode.RecoveryLevel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRecoveryLevel", recoveryLevel)
}

// SetRecoveryLevel indicates an expected call of SetRecoveryLevel.
func (mr *MockProcessorMockRecorder) SetRecoveryLevel(recoveryLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRecoveryLevel", reflect.TypeOf((*MockProcessor)(nil).SetRecoveryLevel), recoveryLevel)
}

// WriteQR mocks base method.
func (m *MockProcessor) WriteQR(path string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteQR", path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteQR indicates an expected call of WriteQR.
func (mr *MockProcessorMockRecorder) WriteQR(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteQR", reflect.TypeOf((*MockProcessor)(nil).WriteQR), path, data)
}
